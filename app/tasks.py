import asyncio
from datetime import datetime, time, timedelta
import pytz
from typing import Dict

from app.db import load_db
from app.keyboards import CATEGORIES
from headers import bot
from logging_file import get_logger

logger = get_logger(__name__)
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_tasks: Dict[str, asyncio.Task] = {}

async def schedule_all_reminders():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î.
    """
    db = load_db()
    for user_id, user_data in db.items():
        buddies = user_data.get("buddies")
        remind_str = user_data.get("buddies_remind")
        timezone_str = user_data.get("timezone")

        if not buddies or not remind_str or not timezone_str:
            continue

        await schedule_reminder(user_id, remind_str, timezone_str)


async def schedule_reminder(user_id: str, remind_str: str, timezone_str: str):
    """
    –°–æ–∑–¥–∞—ë—Ç –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    global reminder_tasks

    # –û—Ç–º–µ–Ω–∏–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    old_task = reminder_tasks.get(user_id)
    if old_task:
        old_task.cancel()

    try:
        hour, minute = map(int, remind_str.split(":"))
        user_tz = pytz.timezone(timezone_str)
        now = datetime.now(user_tz)
        target_time = user_tz.localize(datetime.combine(now.date(), time(hour, minute)))

        if target_time < now:
            target_time += timedelta(days=1)

        delay = (target_time - now).total_seconds()

        task = asyncio.create_task(
            send_reminder_and_repeat(user_id, delay, hour, minute, timezone_str)
        )
        reminder_tasks[user_id] = task
    except Exception as e:
        logger.exception(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")


async def send_reminder_and_repeat(user_id: str, delay: float, hour: int, minute: int, timezone_str: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –µ–≥–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å.
    """
    try:
        await asyncio.sleep(delay)

        db = load_db()
        user_data = db.get(str(user_id))
        if not user_data or not user_data.get("buddies"):
            return

        #buddy_names = [
        #    b_info.get("name", str(b_id))
        #    for b_id, b_info in user_data["buddies"].items()
        # ]

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª buddy

        buddy_text = ""

        for b_key in user_data["buddies"].keys():
            b_info = db[b_key]

            buddy_timezone_str = b_info["timezone"]

            buddy_fio = f"üë§ –ë–∞–¥–∏: {b_info['fio']}"
            buddy_missing = ""


            today = str(datetime.now(pytz.utc).astimezone(pytz.timezone(buddy_timezone_str)).date().today())

            selected_options = db.get(user_id, {}).get("selected_options", [])
            for key in selected_options:
                records = db.get(user_id, {}).get("options_data", {}).get(key, [])
                has_today = any(rec["date_time"].startswith(today) for rec in records)
                name = CATEGORIES.get(key, key)

                buddy_missing += f"‚ùå {name}\n" if not has_today else ""

            if buddy_missing:
                buddy_text += f"{buddy_fio}\n{buddy_missing}\n"

        if not buddy_text:
            return

        text = f"""
üí™ –¢—Ä–µ–≤–æ–≥–∞, –±—Ä–∞—Ç! üí™

–≠–π, –¥—Ä—É–≥!
–¢–≤–æ–π –±–∞–¥–∏ –Ω–µ –Ω–∞ —Å–≤—è–∑–∏. –ú–æ–∂–µ—Ç, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–≤—ë–ª, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –∏–ª–∏ –æ–Ω –∑–∞—Å—Ç—Ä—è–ª –≤ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏?

{buddy_text}
‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä—å —Å–∏—Ç—É–∞—Ü–∏—é:
‚Äî –ù–∞–ø–∏—à–∏ –µ–º—É, —É—Ç–æ—á–Ω–∏ –∫–∞–∫ –¥–µ–ª–∞. –ú–æ–∂–µ—Ç, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
‚Äî –ù–∞–ø–æ–º–Ω–∏: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –Ω–∞—à —Å—Ç–µ—Ä–∂–µ–Ω—å, –Ω–æ –±—Ä–∞—Ç –±—Ä–∞—Ç–∞ —É—á–∏—Ç, –±—Ä–∞—Ç –±—Ä–∞—Ç–∞ –±–µ—Ä–µ–∂—ë—Ç.
‚Äî –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –¥–∞–π –ø–æ–Ω—è—Ç—å: –∫–æ–º–∞–Ω–¥–∞ –∂–¥–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ë–µ–∑ —Å–ª–∞–±–∏–Ω—ã!

–ù–µ –±—Ä–æ—Å–∞–π —Å–≤–æ–µ–≥–æ. –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –Ω–æ –∏ –¥–µ—Ä–∂–∞—Ç—å —É–¥–∞—Ä.
–°–≤—è–∂–∏—Å—å, —Ä–∞–∑–±–µ—Ä–∏—Å—å, –∏ ‚Äî –≤–ø–µ—Ä—ë–¥. –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∂–∞—Ä—á–µ!

üî• –ù–∏–∫–∞–∫–∏—Ö –æ—Ç—Å—Ç—É–ø–ª–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –≤–æ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏–µ.
        """

        await bot.send_message(chat_id=int(user_id), text=text)

    except asyncio.CancelledError:
        logger.info(f"[!] –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è {user_id} –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        return
    except Exception as e:
        logger.exception(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
    try:
        await schedule_reminder(user_id, f"{hour:02d}:{minute:02d}", timezone_str)
    except Exception as e:
        logger.exception(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è {user_id}: {e}")
