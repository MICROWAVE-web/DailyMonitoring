import asyncio
from datetime import datetime, time, timedelta
import pytz
from typing import Dict

from aiogram.types import InlineKeyboardMarkup

from app.db import load_db
from app.keyboards import CATEGORIES
from headers import bot
from logging_file import get_logger

logger = get_logger(__name__)
# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
reminder_tasks: Dict[str, asyncio.Task] = {}

REMIND_TIMES = ["21:00", "23:00"]


async def schedule_all_reminders():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–∞–Ω–Ω—ã–º –≤ –ë–î.
    """
    db = load_db()
    for user_id, user_data in db.items():
        timezone_str = user_data.get("timezone")
        if not timezone_str:
            continue

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        await schedule_fixed_reminder(user_id, timezone_str, 21)
        await schedule_fixed_reminder(user_id, timezone_str, 23)

        buddies = user_data.get("buddies")
        remind_str = user_data.get("buddies_remind")

        if not buddies or not remind_str:
            continue
        await schedule_custom_reminder(user_id, remind_str, timezone_str)
        # await schedule_reminder(user_id, remind_str, timezone_str)

async def schedule_custom_reminder(user_id: str, remind_str: str, timezone_str: str):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (buddies_remind).
    """
    await _schedule(user_id, remind_str, timezone_str, tag="buddy_remind")


async def schedule_fixed_reminder(user_id: str, timezone_str: str, hour: int):
    """
    –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (–≤ 21:00 –∏ 23:00).
    """
    time_str = f"{hour:02d}:00"
    tag = f"fixed_{hour}"
    await _schedule(user_id, time_str, timezone_str, tag=tag)



async def _schedule(user_id: str, remind_str: str, timezone_str: str, tag: str):
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    global reminder_tasks

    key = f'{user_id}_{tag}'
    old_task = reminder_tasks.get(key)
    if old_task:
        old_task.cancel()

    try:
        hour, minute = map(int, remind_str.split(":"))
        user_tz = pytz.timezone(timezone_str)
        now = datetime.now(user_tz)
        target_time = user_tz.localize(datetime.combine(now.date(), time(hour, minute)))

        if target_time < now:
            target_time += timedelta(days=1)

        delay = (target_time - now).total_seconds()

        task = asyncio.create_task(
            _send_and_repeat(user_id, delay, hour, minute, timezone_str, tag)
        )
        reminder_tasks[key] = task
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ {tag} –¥–ª—è {user_id}: {e}")



async def _send_and_repeat(user_id: str, delay: float, hour: int, minute: int, timezone_str: str, tag: str):
    await asyncio.sleep(delay)

    db = load_db()
    user_data = db.get(str(user_id))
    if not user_data:
        return

    try:
        text = ""

        if tag == "buddy_remind" and user_data.get("buddies"):

            buddy_text = ""

            for b_key in user_data["buddies"].keys():
                b_info = db[b_key]

                buddy_timezone_str = b_info["timezone"]

                buddy_fio = f"üë§ –ë–∞–¥–∏: {b_info['fio']}"
                buddy_missing = ""

                today = str(datetime.now(pytz.utc).astimezone(pytz.timezone(buddy_timezone_str)).date().today())

                selected_options = db.get(user_id, {}).get("selected_options", [])
                for key in selected_options:
                    records = db.get(user_id, {}).get("options_data", {}).get(key, [])
                    has_today = any(rec["date_time"].startswith(today) for rec in records)
                    name = CATEGORIES.get(key, key)

                    buddy_missing += f"‚ùå {name}\n" if not has_today else ""

                if buddy_missing:
                    buddy_text += f"{buddy_fio}\n{buddy_missing}\n"

            if not buddy_text:
                return

            text = f"""
üí™ –ó–¥—Ä–∞–≤–∏—è , –±—Ä–∞—Ç! üí™

–ë—Ä–∞—Ç !
–¢–≤–æ–π –±–∞–¥–∏ –Ω–µ –Ω–∞ —Å–≤—è–∑–∏. –ú–æ–∂–µ—Ç, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ–¥–≤—ë–ª, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –∏–ª–∏ –æ–Ω –∑–∞—Å—Ç—Ä—è–ª –≤ –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–∏?

{buddy_text}
‚ö°Ô∏è –ü—Ä–æ–≤–µ—Ä—å —Å–∏—Ç—É–∞—Ü–∏—é:
‚Äî –ù–∞–ø–∏—à–∏ –µ–º—É, —É—Ç–æ—á–Ω–∏ –∫–∞–∫ –¥–µ–ª–∞. –ú–æ–∂–µ—Ç, –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?
‚Äî –ù–∞–ø–æ–º–Ω–∏: –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ ‚Äî –Ω–∞—à —Å—Ç–µ—Ä–∂–µ–Ω—å, –Ω–æ –±—Ä–∞—Ç –±—Ä–∞—Ç–∞ —É—á–∏—Ç, –±—Ä–∞—Ç –±—Ä–∞—Ç–∞ –±–µ—Ä–µ–∂—ë—Ç.
‚Äî –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –¥–∞–π –ø–æ–Ω—è—Ç—å: –∫–æ–º–∞–Ω–¥–∞ –∂–¥–µ—Ç –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ë–µ–∑ —Å–ª–∞–±–∏–Ω—ã!

–ù–µ –±—Ä–æ—Å–∞–π —Å–≤–æ–µ–≥–æ. –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å, –Ω–æ –∏ –¥–µ—Ä–∂–∞—Ç—å —É–¥–∞—Ä.
–ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –∂–∞—Ä—á–µ!

üî• –î–µ—Ä–∂–∏–º –∫—Ä—É–≥!
            """


        elif tag.startswith("fixed_"):

            timezone_str = db[user_id]["timezone"]

            today = str(datetime.now(pytz.utc).astimezone(pytz.timezone(timezone_str)).date().today())

            missing_practice = ""
            selected_options = db.get(user_id, {}).get("selected_options", [])
            for key in selected_options:
                records = db.get(user_id, {}).get("options_data", {}).get(key, [])
                has_today = any(rec["date_time"].startswith(today) for rec in records)
                name = CATEGORIES.get(key, key)
                missing_practice += f"‚ùå {name}\n" if not has_today else ""

            if not missing_practice:
                return

            if tag.endswith("21"):
                text = f"‚ùó –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–¥–µ–ª–∞–π –∑–∞–ø–∏—Å—å ‚úçÔ∏è\n\n{missing_practice}"
            elif tag.endswith("23"):
                text = f"üö® –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å —É—Å–ø–µ—Ç—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ü—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏ —Å–¥–µ–ª–∞–π –∑–∞–ø–∏—Å—å ‚úçÔ∏è\n\n{missing_practice}"
        else:
            return

        if text:
            await bot.send_message(chat_id=int(user_id), text=text)

    except asyncio.CancelledError:
        return
    except Exception as e:
        print(f"[!] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {tag} –¥–ª—è {user_id}: {e}")

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    await _schedule(user_id, f"{hour:02d}:{minute:02d}", timezone_str, tag)
