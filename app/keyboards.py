from datetime import datetime

import pytz
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from app.db import load_db
from logging_file import get_logger

logger = get_logger(__name__)  # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
CATEGORIES = {
    "wakeup_time": "üåÖ –†–∞–Ω–Ω–∏–π –ø–æ–¥—ä—ë–º",
    "pray": "üôè –ú–æ–ª–∏—Ç–≤–∞", # –ù–æ–≤–æ–µ bool
    "breathholding": "‚è≥–ó–∞–¥–µ—Ä–∂–∫–∞ –¥—ã—Ö–∞–Ω–∏—è", # –ù–æ–≤–æ–µ count
    "abdomen": "üåÄ –õ–∞–¥ –∂–∏–≤–æ—Ç–∞",
    "tree": "üå≥ –î–µ—Ä–µ–≤–æ –∂–∏–∑–Ω–∏",
    "falconbreath": "ü¶Ö –î—ã—Ö–∞–Ω–∏–µ —Å–æ–∫–æ–ª–∞",
    "swimming": "üèä –ü–ª–∞–≤–∞–Ω—å–µ",
    "water": "üíß –í–æ–¥–∞",
    "steps": "üö∂ –•–æ–¥—å–±–∞",
    "pushups": "üí™ –û—Ç–∂–∏–º–∞–Ω–∏—è",
    "pullups": "ü§∏ –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è",
    "squats": "üèãÔ∏è –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
    "abs": "üßò –ü—Ä–µ—Å—Å",
    "plank": "„Ä∞ –ø–ª–∞–Ω–∫–∞ —Å –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–µ–º –∫–æ–ª–µ–Ω–µ–π –∫ –≥—Ä—É–¥–∏ (1+1 –º–∏–Ω—É—Ç–∞)", # –ù–æ–≤–æ–µ bool
    "bars": "üü∞ –ë—Ä—É—Å—å—è", # –ù–æ–≤–æ–µ count
    "coordinate": "üí´ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏",  # –ù–æ–≤–æ–µ bool
    "battery": "üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ",
    "intention": "üéØ –ù–∞–º–µ—Ä–µ–Ω–∏–µ",
    "note": "üìù –ó–∞–º–µ—Ç–∫–∏ –∑–∞ –¥–µ–Ω—å",

}


def get_categories_keyboard(user_id: str, db: dict) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    selected_options = db.get(user_id, {}).get("selected_options", [])
    for key, name in CATEGORIES.items():
        circle = "üü¢" if key in selected_options else "‚ö™"
        text = f"{name} {circle}"
        button = InlineKeyboardButton(text=text, callback_data=f"toggle:{key}")
        kb.inline_keyboard.append([button])
    kb.inline_keyboard.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="done")])
    return kb


def get_statistics_keyboard(user_id: str, db: dict) -> InlineKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–∂–µ –≤–Ω–µ—Å–µ–Ω—ã (–Ω–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É),
    –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Å—Ç–∞–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞.
    """

    db = load_db()
    timezone_str = db[user_id]["timezone"]

    today = str(datetime.now(pytz.utc).astimezone(pytz.timezone(timezone_str)).date().today())

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    selected_options = db.get(user_id, {}).get("selected_options", [])
    for key in selected_options:
        records = db.get(user_id, {}).get("options_data", {}).get(key, [])
        has_today = any(rec["date_time"].startswith(today) for rec in records)
        name = CATEGORIES.get(key, key)
        text = f"‚úÖ {name}" if has_today else name
        kb.inline_keyboard.append([InlineKeyboardButton(text=text, callback_data=f"entry:{key}")])
    return kb


def get_reply_keyboard() -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ó–∞–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è¬ª –∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")],
            [KeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")],
            [KeyboardButton(text="–î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç")],
            [KeyboardButton(text="–ú–æ–∏ –ë–∞–¥–∏")],
            [KeyboardButton(text="–ú–æ–∏ –Ω–æ—Ä–º—ã")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="üìç –ü–æ–º–µ–Ω—è—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]],

        resize_keyboard=True
    )
    return kb


def get_buddies_keyboard() -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–ó–∞–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è¬ª –∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª.
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å üë§")],
            [KeyboardButton(text="–í—ã–≥–Ω–∞—Ç—å üö´")],
            [KeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üïì")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")],
        ],

        resize_keyboard=True
    )
    return kb

def geo_keybord() -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç reply‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é¬ª.

    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)],
            [KeyboardButton(text="–ü–æ–∑–∂–µ")]
        ],
        resize_keyboard=True
    )
    return kb

def get_kick_keyboard(buddy_ids: list[int]) -> ReplyKeyboardMarkup:
    buttons = [[KeyboardButton(text=str(uid))] for uid in buddy_ids]
    buttons.append([KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)




# –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
MESSAGES = {
    "start": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
    "welcome_back": "–ò –≤ –Ω–æ–≤—å –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å :)",
    "get_location": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å!",
    "welcome": lambda fio: (
        f"–ò—Å—Ç–∏–Ω–Ω—ã–π –ø—É—Ç—å\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {fio}!\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.\n"
        "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:"
    ),
    "no_category_selected": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä!",
    "settings_title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:",
    "config_complete": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.",
    "enter_value": lambda category_name: f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_name}:",
    "value_saved": lambda category_key: f"–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {CATEGORIES[category_key]} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!",
    "enter_new_day": "–ó–∞–Ω–µ—Å–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –¥–Ω—è:",
    "invalid_time": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00):",
    "invalid_battery": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ (battery). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
    "invalid_number": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:",
    "user_not_found": "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",


    # –ë–∞–¥–∏
    # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±–∞–¥–∏
    "buddy_invite_choose_method": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:",
    "buddy_invite_contact": "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
    "buddy_invite_id": "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
    "buddy_added": lambda name_or_id: f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>{name_or_id}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–¥–∏!",
    "buddy_already_added": "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É –≤–∞—Å –≤ –±–∞–¥–∏.",
    "buddy_self_error": "–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è üôÇ",
    "buddy_invalid_id": "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID.",
    "buddy_invalid_id_undefined": "–≠—Ç–æ–≥–æ id –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö üòî",
    "buddy_back": "–û–∫–µ–π. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.",
    "buddy_use_button": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞.",

    "chose_buddy_option": lambda buddies: (
            "–¢–≤–æ–∏ –ë–∞–¥–∏:\n" +
            "\n".join([f"<b>{buddies[b_key]['name']}</b> ‚Äî (id={b_key})" for b_key in buddies]) if buddies else MESSAGES["empty"]
    ),
    "invite": "–ö–æ–≥–æ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å? üè∑Ô∏è –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –º–Ω–µ –µ–≥–æ @—Ç–µ–≥",
    "kick_choose": "–í—ã–±–µ—Ä–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à—å –≤—ã–≥–Ω–∞—Ç—å:",
    "empty": "–£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –±–∞–¥–∏ üòî",


    # –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    "enter_wakeup": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥—ä—ë–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 07:00):",
    "enter_steps": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É —à–∞–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4000):",
    "enter_pushups": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∂–∏–º–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä,  20):",
    "enter_pullups": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):",
    "enter_squats": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30):",
    "enter_abs": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø—Ä–µ—Å—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15):",
    "enter_abdomen": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –¥–ª—è –õ–∞–¥–∞ –∂–∏–≤–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01:30):",
    "enter_tree": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –¥–ª—è –î–µ—Ä–µ–≤–∞ –ñ–∏–∑–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 02:30):",
    "enter_falconbreath": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –¥–ª—è –î—ã—Ö–∞–Ω–∏—è —Å–æ–∫–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01:30):",

    "enter_breathholding": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –¥–ª—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥—ã—Ö–∞–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):",
    "enter_bars": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º—É –¥–ª—è –±—Ä—É—Å—å–µ–≤ –≤ —Ä–∞–∑. (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15):",



    "get_link": lambda user_id: f'üìà –í–æ—Ç –≤–∞—à–∞ <a href="http://83.222.25.179:8015/report/{user_id}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</a>',
}
